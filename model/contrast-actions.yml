groups:
  - id: attributes.contrast.actions
    type: attribute_group
    brief: "Actions that we track in Contrast"
    attributes:
      - id: action
        brief: >
          The type of action that was observed.
        requirement_level: required
        examples:
          - file-open-create
          - authn-request
        type:
          allow_custom_values: false
          members:
            - id: storage-query
              value: "storage-query"
              brief: "Functions that execute queries"
            - id: file-open-create
              value: "file-open-create"
              brief: "file open or create action"
            - id: url-forward
              value: "url-forward"
              brief: "Any function designed to forward a request to another URL"
            - id: url-redirect
              value: "url-redirect"
              brief: "Function that result in an http 302 redirect code sent to the client"
            - id: host-cmd-exec
              value: "host-cmd-exec"
              brief: "system shell command execution"
            - id: ldap-query
              value: "ldap-query"
              brief: "Functions that result in and ldap query operation"
            - id: smtp-exec
              value: "smtp-exec"
              brief: "Functions that result in an SMTP command execution"
            - id: outbound-service-call
              value: "outbound-service-call"
              brief: "Functions that result in external calls to other services"
            - id: authn-request
              value: "authn-request"
              brief: "Functions that perform authentication actions"
            - id: authz-request
              value: "authz-request"
              brief: "Functions that perform authorization actions"
            - id: el-execution
              value: "el-execution"
              brief: "Spring expression language execution"
            - id: ognl-execution
              value: "ognl-execution"
              brief: "Object-Graph Navigation Language expression execution."

  - id: attributes.contrast.action.metric
    type: attribute_group
    brief: "Describes attributes for Contrast Action metrics"
    attributes:
      - id: http.method
        type: string
        requirement_level: required
        brief: >
          http method used when the action was encountered.
        examples:
          - GET
          - POST
      - id: http.route
        type: string
        requirement_level: required
        brief: >
          http route used when the action was encountered.
        examples: "/foo/bar"

  - id: metric.http.server.action.total
    type: metric
    metric_name: http.server.action.total
    unit: "{action}"
    brief: "A counter of actions for contrast"
    instrument: counter
    attributes:
      - ref: action
      - ref: http.method
      - ref: http.route

  - id: attributes.contrast.action.span.authn
    prefix: contrast.authentication
    type: span
    brief: "Describes attributes for Contrast Action span of type authn-request"
    attributes:
      - id: mechanism
        brief: >
          An authentication mechanism is a specific method or approach used to
          verify the identity of a user, system, or entity attempting to access a resource.
        examples: [password, token, biometric]
        type:
          allow_custom_values: false
          members:
            - id: password
              value: "password"
              brief: "Users provide a username and password."
            - id: certificate
              value: "certificate"
              brief: "x509 certificate authentication or similar"
            - id: token
              value: "token"
              brief: "Involves using a physical or virtual token to authenticate a user"
            - id: biometric
              value: "biometric"
              brief: "file open or create action"
            - id: mfa
              value: "mfa"
              brief: "Two or more of the above mechanisms are used"

      - id: protocol
        brief: >
          An authentication protocol is a set of rules and procedures that
          dictate how authentication mechanisms should operate to establish
          trust and verify identities securely.
        examples: [oauth, saml, ldap, custom]
        type:
          allow_custom_values: false
          members:
            - id: saml
              value: "saml"
              brief: "Security Assertion Markup Language"
            - id: oauth
              value: "oauth"
              brief: "Open Authentication and OIDC"
            - id: ldap
              value: "ldap"
              brief: "Lightweight Directory Access Protocol"
            - id: kerberos
              value: "kerberos"
              brief: ""

  - id: attributes.contrast.action.span.authz
    prefix: contrast.authorization
    type: span
    brief: >
      Describes attributes for Contrast Action span of type authz-request
    attributes:
      - id: mechanism
        brief: >
          How are authz decisions made for the resource.
        examples: [rbac, dac, pbac]
        type:
          allow_custom_values: false
          members:
            - id: rbac
              value: "rbac"
              brief: Role Based Access Control
            - id: abac
              value: "abac"
              brief: Attribute Based Access Control
            - id: mac
              value: "mac"
              brief: >
                Mandatory Access Control (MAC) is a security model where access to resources is determined by
                the security labels assigned to subjects (users or processes) and objects (resources).
            - id: dac
              value: "dac"
              brief: Discretionary Access Control (DAC) is a model where owners of resources have the discretion to control access to their resources.
            - id: pbac
              value: "pbac"
              brief: Policy Based Access Control
            - id: hbac
              value: "hbac"
              brief: History Based Access Control
            - id: tbac
              value: "tbac"
              brief: Time Based Access Control

      - id: rbac.role
        brief: >
          Role Requested for authz check. The values here are very domain specific, but
          will always be normalized to a lowercase value in the data here.
        examples: [user, editor, manager]
        type: string
      - id: dac.permission
        brief: >
          Permission requested for access to the resource. The values here are very domain specific, but
          will always be normalized to a lowercase value in the data here.
        examples: [read, write, append, delete]
        type: string
      - id: mac.labels
        brief: >
          Labels on the requested resource. The values here are very domain specific, but
          will always be normalized to a lowercase value in the data here.
        examples: [top_secret, confidential, internal, public]
        type: string

  - id: contrast.action.span.authn
    type: span
    brief: "Describes attributes for Contrast Authentication Action spans"
    attributes:
      - ref: contrast.authentication.mechanism
      - ref: contrast.authentication.protocol

  - id: contrast.action.span.authz
    type: span
    brief: "Describes attributes for Contrast Authorization Action spans"
    attributes:
      - ref: contrast.authorization.mechanism
        requirement_level: recommended
      - ref: contrast.authorization.rbac.role
        requirement_level:
          recommended: If mechanism is 'rbac'
      - ref: contrast.authorization.dac.permission
        requirement_level:
          recommended: If mechanism is 'dac'
      - ref: contrast.authorization.mac.labels
        requirement_level:
          recommended: If mechanism is 'mac'

  - id: contrast.action.span.file-open-create
    prefix: file.open
    type: span
    brief: >
      Describes attributes for Contrast Action span of type file-open-create.
    attributes:
      - id: path
        brief: >
          The absolute path that was accessed.
        requirement_level: required
        examples: [/etc/myconfig, /foo/bar, /some/tmp]
        type: string
      - id: flags
        brief: >
          The flags used when the file was opened or created.
        requirement_level: recommended
        examples: [o_rdonly, o_rdwr]
        type:
          allow_custom_values: false
          members:
            - id: o_rdonly
              value: o_rdonly
              brief: Read only access
            - id: o_wronly
              value: o_wronly
              brief: Write only access
            - id: o_rdwr
              value: o_rdwr
              brief: Read/write access
  - id: contrast.action.span.host-cmd-exec
    type: span
    brief: >
      Describes attributes for Contrast Action span of type host-cmd-exec.
    attributes:
      - id: cmd
        brief: >
          String of executed command with its arguments.
        requirement_level: required
        examples: [ls /foo, bash -c somebin, chmod 755 foobar]
        type: string
  - id: contrast.action.span.outbound-service-call
    type: span
    brief: >
      Describes attributes for Contrast Action span of type outbound-service-call.
      These actions are always using the http protocol.
    attributes:
      - id: http.request.method
        brief: HTTP request method.
        type: string
        requirement_level: required
        note: >
           HTTP request method value SHOULD be “known” to the instrumentation.
           By default, this convention defines “known” methods as the ones
           listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)
           and the PATCH method defined in
           [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).
        examples: [POST, GET, DELETE]
      - id: http.response.status_code
        type: int
        brief: "[HTTP response status code](https://datatracker.ietf.org/doc/html/rfc7231#section-6)."
        requirement_level:
          conditionally_required: if and only if one was received.
      - id: network.protocol.version
        brief: Version of the http protocol used.
        requirement_level: recommended
        type: string
        examples: ["1.0", "1.1", "2", "3"]
        note: >
          network.protocol.version refers to the version of the protocol used
          and might be different from the protocol client’s version. If the
          HTTP client has a version of 0.27.2, but sends HTTP version 1.1, this
          attribute should be set to 1.1.
      - id: network.peer.address
        brief: >
          Peer address of the network connection - IP address or Unix domain socket name.
        requirement_level: recommended
        type: string
        examples: ["10.1.2.80", /tmp/my.sock]
      - id: network.peer.port
        brief: Peer port number of the network connection.
        requirement_level:
          recommended: if `network.peer.address` populated
        type: int
        examples: [80, 8080, 443]
      - id: server.address
        brief: >
          Name of the remotely connected host.
        requirement_level: required
        examples: [example.com, "10.1.2.80", /tmp/my.sock]
        type: string
        note: >
          If an HTTP client request is explicitly made to an IP address,
          e.g. `http://x.x.x.x:8080`, then server.address SHOULD be the IP
          address x.x.x.x. A DNS lookup SHOULD NOT be used.
      - id: server.port
        brief: >
          	Port identifier of the [“URI origin”](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.
        requirement_level: required
        examples: [80, 8080, 443]
        type: int
        note: >
          When observed from the client side, and when communicating through an
          intermediary, `server.port`` SHOULD represent the server port behind
          any intermediaries, for example proxies, if it’s available.
      - id: url.full
        requirement_level: required
        type: string
        brief: >
          Absolute URL describing a network resource according to
          [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)
        examples: [
          "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
          "//localhost"]
        note: >
          For network calls, URL usually has
          `scheme://host[:port][path][?query][#fragment]` format, where the
          fragment is not transmitted over HTTP, but if it is known, it SHOULD
          be included nevertheless. `url.full` MUST NOT contain credentials
          passed via URL in form of
          `https://username:password@www.example.com/`.
          In such case username and password SHOULD be redacted and attribute’s
          value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.
          `url.full` SHOULD capture the absolute URL when it is available
          (or can be reconstructed) and SHOULD NOT be validated or modified
          except for sanitizing purposes.
